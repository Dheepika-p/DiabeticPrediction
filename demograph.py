# -*- coding: utf-8 -*-
"""demograph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iP9lCKWhnuqFIjLY0zR0PcmEba6Iepty
"""

# import necessarry libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

from sklearn.preprocessing import MinMaxScaler,StandardScaler,OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import BernoulliNB
from sklearn.metrics import confusion_matrix, classification_report, f1_score
import os
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_regression
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score
import pickle

diabetes=pd.read_csv('fyp_ts.csv')

new_name={'Timestamp':'ts','Username':'uname', 'Name':'name', 'Age':'age', 'Sex':'sex', 'Height (in cm)':'height', 'Weight (in kg)':'weight',
       'Are you Diabetic?':'diabetic', 'Are both or either of your parents diabetic?':'dia_parent',
       'Have you ever been diagnosed with high blood pressure ?':'bp',
       'Are you on medication for high blood pressure ?':'med_bp',
       'Are you physically active ?':'phy_active', 'Do you smoke?':'smoke', 'Do you drink?':'drinking',
       'Fasting glucose value':'glucose_val',
       'If Diabetic, enter your Hba1c value (If known)':'hba1c',
       'Do you experience frequent increased thirst?':'thrist',
       'Do you experience frequent urination?':'urination',
       'Do you experience extreme hunger?':'hunger',
       'Do you have unexplained weight loss ?':'wgt_loss', 'Do you have fatigue ?':'fatigue',
       'Do you have burning sensation in feet ?':'burn',
       'Do you have dark patch or velvety skin in your neck  ?':'dark_patch',
       'Do you have Blurred vision ?':'blur_vision', 'Do you have slow-healing sores?':'sores',
       'Have you experienced frequent infections such as  gums or itches and  skin infections?':'infection',
       'Do you take insulin?':'insulin_take',
       'Do you suffer from any other disease?  (If yes, please specify)':'other_disease',
       'Please upload your tongue image (similar to the reference image file)':'tongue_img',
       
       }
diabetes.rename(columns=new_name,inplace=True)

# remove units from measurement
diabetes['height']=diabetes['height'].str.extract('(\d+)').astype(int)
diabetes['weight']=diabetes['weight'].str.extract('(\d+)').astype(int)
# works  if age has years   
diabetes['age']=diabetes['age'].str.extract('(\d+)').astype(int)

# Age division
diabetes['agediv']='null'
for i in range(len(diabetes['diabetic'])):
  if(diabetes['age'][i]<=30):
     diabetes['agediv'][i]='less_than_30'
  elif(diabetes['age'][i]>=30 and diabetes['age'][i]<=60):
     diabetes['agediv'][i]='less_than_60'
  elif(diabetes['age'][i]>60):
     diabetes['agediv'][i]='more_than_60'

# Calculate BMI
diabetes['bmi']='null'
for i  in range(len(diabetes['diabetic'])):
  diabetes['bmi'][i]=diabetes['weight'][i]/(diabetes['height'][i]*diabetes['height'][i]*0.01*0.01)

# bmi division
diabetes['bmidiv']='null'
for i in range(len(diabetes['diabetic'])):
  if(diabetes['bmi'][i]<=18.5):
     diabetes['bmidiv'][i]='underweight'
  elif(diabetes['bmi'][i]>=18.5 and diabetes['bmi'][i]<=24.9):
     diabetes['bmidiv'][i]='healthy'
  elif(diabetes['bmi'][i]>=25 and diabetes['bmi'][i]<=29.9):
     diabetes['bmidiv'][i]='overweight'
  elif(diabetes['bmi'][i]>=30):
     diabetes['bmidiv'][i]='obese'

#Removing timestamp, email, img column
diabetes.drop(['ts'],axis=1,inplace=True)
diabetes.drop(['tongue_img'],axis=1,inplace=True)
diabetes.drop(['age'],axis=1,inplace=True)
diabetes.drop(['bmi'],axis=1,inplace=True)
diabetes.drop(['uname'],axis=1,inplace=True)
# removing hba1c columns because it contains more null values
diabetes.drop(['hba1c'],axis=1,inplace=True)
diabetes.drop(['other_disease'],axis=1,inplace=True)
diabetes.drop(['name'],axis=1,inplace=True)
# removing glucose value
diabetes.drop(['glucose_val'],axis=1,inplace=True)

diabetes=pd.get_dummies(diabetes,columns=['agediv'])
diabetes=pd.get_dummies(diabetes,columns=['bmidiv'])
diabetes.drop(['bmidiv_null'],axis=1,inplace=True)

diabetes.head()



diabetes['agediv_less_than_30']=diabetes['agediv_less_than_30'].replace(1,'Yes')
diabetes['agediv_less_than_30']=diabetes['agediv_less_than_30'].replace(0,'No')
diabetes['agediv_less_than_60']=diabetes['agediv_less_than_60'].replace(1,'Yes')
diabetes['agediv_less_than_60']=diabetes['agediv_less_than_60'].replace(0,'No')
diabetes['agediv_more_than_60']=diabetes['agediv_more_than_60'].replace(1,'Yes')
diabetes['agediv_more_than_60']=diabetes['agediv_more_than_60'].replace(0,'No')
diabetes['bmidiv_healthy']=diabetes['bmidiv_healthy'].replace(1,'Yes')
diabetes['bmidiv_healthy']=diabetes['bmidiv_healthy'].replace(0,'No')
diabetes['bmidiv_overweight']=diabetes['bmidiv_overweight'].replace(1,'Yes')
diabetes['bmidiv_overweight']=diabetes['bmidiv_overweight'].replace(0,'No')
diabetes['bmidiv_underweight']=diabetes['bmidiv_underweight'].replace(1,'Yes')
diabetes['bmidiv_underweight']=diabetes['bmidiv_underweight'].replace(0,'No')
diabetes['bmidiv_obese']=diabetes['bmidiv_obese'].replace(1,'Yes')
diabetes['bmidiv_obese']=diabetes['bmidiv_obese'].replace(0,'No')

diabetes.head()

# Move the target variable to last column
Diab=diabetes.pop('diabetic')
diabetes.insert(27,'diabetic',Diab)

X = diabetes.iloc[:,3:-1]
y = diabetes['diabetic']
X=X.astype(str)

X.head()

X.info()

#Categorical Encoding
#diabetes=pd.get_dummies(diabetes,columns=['sex'])
diabetes['dia_parent']=diabetes['dia_parent'].eq('Yes').astype(int)
diabetes['bp']=diabetes['bp'].eq('Yes').astype(int)
diabetes['med_bp']=diabetes['med_bp'].eq('Yes').astype(int)
diabetes['phy_active']=diabetes['phy_active'].eq('Yes').astype(int)
diabetes['smoke']=diabetes['smoke'].eq('Yes').astype(int)
diabetes['drinking']=diabetes['drinking'].eq('Yes').astype(int)
diabetes['thrist']=diabetes['thrist'].eq('Yes').astype(int)
diabetes['urination']=diabetes['urination'].eq('Yes').astype(int)
diabetes['hunger']=diabetes['hunger'].eq('Yes').astype(int)
diabetes['fatigue']=diabetes['fatigue'].eq('Yes').astype(int)
diabetes['wgt_loss']=diabetes['wgt_loss'].eq('Yes').astype(int)
diabetes['burn']=diabetes['burn'].eq('Yes').astype(int)
diabetes['dark_patch']=diabetes['dark_patch'].eq('Yes').astype(int)
diabetes['blur_vision']=diabetes['blur_vision'].eq('Yes').astype(int)
diabetes['sores']=diabetes['sores'].eq('Yes').astype(int)
diabetes['infection']=diabetes['infection'].eq('Yes').astype(int)
diabetes['insulin_take']=diabetes['insulin_take'].eq('Yes').astype(int)
diabetes['diabetic']=diabetes['diabetic'].eq('Yes').astype(int)
diabetes['agediv_less_than_30']=diabetes['agediv_less_than_30'].eq('Yes').astype(int)
diabetes['agediv_less_than_60']=diabetes['agediv_less_than_60'].eq('Yes').astype(int)
diabetes['agediv_more_than_60']=diabetes['agediv_more_than_60'].eq('Yes').astype(int)
diabetes['bmidiv_healthy']=diabetes['bmidiv_healthy'].eq('Yes').astype(int)
diabetes['bmidiv_obese']=diabetes['bmidiv_obese'].eq('Yes').astype(int)
diabetes['bmidiv_overweight']=diabetes['bmidiv_overweight'].eq('Yes').astype(int)
diabetes['bmidiv_underweight']=diabetes['bmidiv_underweight'].eq('Yes').astype(int)



encX = diabetes.iloc[:,3:-1]
ency = diabetes['diabetic']

encX

#Feature Selection
KBest=SelectKBest(score_func=f_regression,k=12).fit(encX,ency)
f=KBest.get_support(1)
X_new=encX[encX.columns[f]]

X_new=X[X.columns[f]]

X_new.drop(['insulin_take'],axis=1,inplace=True)
X_new.head()

X_train,X_test,y_train,y_test = train_test_split(X_new,y,test_size=0.3,random_state=25)
#X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=25)

X_train.head()

y_train.head()

nb=BernoulliNB()
#nb.fit(X_train,y_train)
#y_pred=nb.predict(X_test)

ohe = OneHotEncoder()

# Fit the encoded categorical data to the inputs for the model
ohe.fit(X[['bp','med_bp','urination','hunger','wgt_loss','fatigue','burn','sores','agediv_less_than_30','agediv_less_than_60','agediv_more_than_60']])
column_trans = make_column_transformer((OneHotEncoder(categories=ohe.categories_),['bp','med_bp','urination','hunger','wgt_loss','fatigue','burn','sores','agediv_less_than_30','agediv_less_than_60','agediv_more_than_60']), remainder='passthrough')
pipe = make_pipeline(column_trans,nb)
pipe.fit(X_train,y_train)

with open('model.pkl', 'wb') as files:
    pickle.dump(pipe, files)

#mod=pickle.load(open('model.pkl','rb'))
#print(mod.predict(pd.DataFrame(columns=['bp','burns','sores'],data=np.array([bp,burn,sores])))
#print(mod.predict([[0,0,1]]))
#print(mod.predict([[1,1,1,0,1,0,1,0,0,1,0,0]]))
#print(mod.predict([['Yes','Yes','Yes','No','Yes','No','Yes','No','No','Yes','No','No']]))



#price_pred = pipe.predict(pd.DataFrame(columns=['bp','med_bp','urination','hunger','wgt_loss','fatigue','burn','sores','agediv_less_than_30','agediv_less_than_60','agediv_more_than_60'],data=np.array([bp,med_bp,urination,hunger,wgt_loss,fatigue,burn,sores,agediv_less_than_30,agediv_less_than_60,agediv_more_than_60]).reshape(1,11)))

#print(price_pred)

bp = request.form.get('bp')
    med_bp = request.form.get('med_bp')
    urination = request.form.get('urination')
    hunger=request.form.get('hunger')
    wgt_loss=request.form.get('wgt_loss')
    fatigue=request.form.get('fatigue')
    burn=request.form.get('burn')
    sores=request.form.get('sores')
    insulin_intake=request.form.get('insulin_intake')
    agediv_less_than_30=request.form.get('agediv_less_than_30')
    agediv_less_than_60=request.form.get('agediv_less_than_60')
    agediv_more_than_60=request.form.get('agediv_more_than_60')
    input_query = np.array([[bp,med_bp,urination,hunger,wgt_loss,fatigue,burn,sores,insulin_intake,agediv_less_than_30,agediv_less_than_60,agediv_more_than_60]])
    result = model.predict(input_query)[0]



    '''if __name__ == '__main__':
  app.run(host="0.0.0.0", port=4444, debug=True,use_reloader=False)'''